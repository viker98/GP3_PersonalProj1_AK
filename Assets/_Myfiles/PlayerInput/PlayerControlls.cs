//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Myfiles/PlayerInput/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""Activate Activators"",
            ""id"": ""e8749cf0-ebd0-4e11-8218-9da4dfe8f41d"",
            ""actions"": [
                {
                    ""name"": ""Green Activator"",
                    ""type"": ""Button"",
                    ""id"": ""9c6edf5f-f642-4279-a28d-cc1a61504658"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Red Activator"",
                    ""type"": ""Button"",
                    ""id"": ""37c7582b-cb5a-43d0-bfab-9d3e38185b41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Yellow Activator"",
                    ""type"": ""Button"",
                    ""id"": ""6109fffc-ae7b-4f2b-8cea-69d2b89a1392"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Blue Activator"",
                    ""type"": ""Button"",
                    ""id"": ""cda44a8b-9fc5-425d-a2b7-565c565612af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.3)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""a71bee88-69bf-4672-a96f-1c10b8bb2fcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""fca4d2c5-67cf-48d3-a9cc-a45971b0be1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""76f006b6-78b8-4f12-b756-5f927e18f7ce"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Red Activator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70fb7132-be10-4180-9ad2-6b4ea560beda"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yellow Activator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""349a17ce-bd20-455e-b976-bb8bfafd3cdd"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Blue Activator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84c464a0-f3ce-45e7-9b4f-b12adf514d0c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Green Activator"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7227c6e-ed67-4b85-bbc2-beee60a5e7b0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4e08e5b-ddfc-4bfd-b7d0-2d970b125022"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Activate Activators
        m_ActivateActivators = asset.FindActionMap("Activate Activators", throwIfNotFound: true);
        m_ActivateActivators_GreenActivator = m_ActivateActivators.FindAction("Green Activator", throwIfNotFound: true);
        m_ActivateActivators_RedActivator = m_ActivateActivators.FindAction("Red Activator", throwIfNotFound: true);
        m_ActivateActivators_YellowActivator = m_ActivateActivators.FindAction("Yellow Activator", throwIfNotFound: true);
        m_ActivateActivators_BlueActivator = m_ActivateActivators.FindAction("Blue Activator", throwIfNotFound: true);
        m_ActivateActivators_Click = m_ActivateActivators.FindAction("Click", throwIfNotFound: true);
        m_ActivateActivators_Pause = m_ActivateActivators.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Activate Activators
    private readonly InputActionMap m_ActivateActivators;
    private List<IActivateActivatorsActions> m_ActivateActivatorsActionsCallbackInterfaces = new List<IActivateActivatorsActions>();
    private readonly InputAction m_ActivateActivators_GreenActivator;
    private readonly InputAction m_ActivateActivators_RedActivator;
    private readonly InputAction m_ActivateActivators_YellowActivator;
    private readonly InputAction m_ActivateActivators_BlueActivator;
    private readonly InputAction m_ActivateActivators_Click;
    private readonly InputAction m_ActivateActivators_Pause;
    public struct ActivateActivatorsActions
    {
        private @PlayerControlls m_Wrapper;
        public ActivateActivatorsActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @GreenActivator => m_Wrapper.m_ActivateActivators_GreenActivator;
        public InputAction @RedActivator => m_Wrapper.m_ActivateActivators_RedActivator;
        public InputAction @YellowActivator => m_Wrapper.m_ActivateActivators_YellowActivator;
        public InputAction @BlueActivator => m_Wrapper.m_ActivateActivators_BlueActivator;
        public InputAction @Click => m_Wrapper.m_ActivateActivators_Click;
        public InputAction @Pause => m_Wrapper.m_ActivateActivators_Pause;
        public InputActionMap Get() { return m_Wrapper.m_ActivateActivators; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActivateActivatorsActions set) { return set.Get(); }
        public void AddCallbacks(IActivateActivatorsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActivateActivatorsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActivateActivatorsActionsCallbackInterfaces.Add(instance);
            @GreenActivator.started += instance.OnGreenActivator;
            @GreenActivator.performed += instance.OnGreenActivator;
            @GreenActivator.canceled += instance.OnGreenActivator;
            @RedActivator.started += instance.OnRedActivator;
            @RedActivator.performed += instance.OnRedActivator;
            @RedActivator.canceled += instance.OnRedActivator;
            @YellowActivator.started += instance.OnYellowActivator;
            @YellowActivator.performed += instance.OnYellowActivator;
            @YellowActivator.canceled += instance.OnYellowActivator;
            @BlueActivator.started += instance.OnBlueActivator;
            @BlueActivator.performed += instance.OnBlueActivator;
            @BlueActivator.canceled += instance.OnBlueActivator;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IActivateActivatorsActions instance)
        {
            @GreenActivator.started -= instance.OnGreenActivator;
            @GreenActivator.performed -= instance.OnGreenActivator;
            @GreenActivator.canceled -= instance.OnGreenActivator;
            @RedActivator.started -= instance.OnRedActivator;
            @RedActivator.performed -= instance.OnRedActivator;
            @RedActivator.canceled -= instance.OnRedActivator;
            @YellowActivator.started -= instance.OnYellowActivator;
            @YellowActivator.performed -= instance.OnYellowActivator;
            @YellowActivator.canceled -= instance.OnYellowActivator;
            @BlueActivator.started -= instance.OnBlueActivator;
            @BlueActivator.performed -= instance.OnBlueActivator;
            @BlueActivator.canceled -= instance.OnBlueActivator;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IActivateActivatorsActions instance)
        {
            if (m_Wrapper.m_ActivateActivatorsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActivateActivatorsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActivateActivatorsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActivateActivatorsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActivateActivatorsActions @ActivateActivators => new ActivateActivatorsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IActivateActivatorsActions
    {
        void OnGreenActivator(InputAction.CallbackContext context);
        void OnRedActivator(InputAction.CallbackContext context);
        void OnYellowActivator(InputAction.CallbackContext context);
        void OnBlueActivator(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
